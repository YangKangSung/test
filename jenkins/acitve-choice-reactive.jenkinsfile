#!/usr/bin/env groovy
def doubleQuoteElements = { w -> '"' + w + '"' }

List infoTypeChoices = ['name', 'age'].collect(doubleQuoteElements)

List namesList = ['John', 'Carl'].collect(doubleQuoteElements)
List agesList = ['34', '29'].collect(doubleQuoteElements)

def getStaticListScript(List l) {
    return "return $l"
}

def getEntriesPerInfoType(List namesList, List agesList) {
    def entriesPerInfoType = """
                                if(INFO_TYPE.equals('name')) { return $namesList }
                                if(INFO_TYPE.equals('age')) { return $agesList }
                                else { return [''] }
                             """
    return entriesPerInfoType
}

infoTypeScript = getStaticListScript(infoTypeChoices)
entriesPerInfoTypeScript = getEntriesPerInfoType(namesList, agesList)

properties([
    parameters([
        [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',
        description: 'Type of information you want, ie. names or ages',
        name: 'INFO_TYPE',
        script:
            [$class: 'GroovyScript',
            fallbackScript: [classpath: [], sandbox: true, script: 'return ["ERROR"]'],
            script: [classpath: [], sandbox: true, script: infoTypeScript]
            ]
        ],
        [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT',
        description: 'Entries for the type of information you selected',
        name: 'ENTRY_PER_INFO_TYPE',
        referencedParameters: 'INFO_TYPE',
        script:
            [$class: 'GroovyScript',
            fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'],
            script: [classpath: [], sandbox: true, script: entriesPerInfoTypeScript]]
        ],

    ])
])

pipeline {
    agent any

    stages {
        stage ("Print Inputs"){
            steps {
                script{
                    echo "printing inputs ..."
                    echo "INFO_TYPE: "+ INFO_TYPE
                    echo "ENTRY_PER_INFO_TYPE: "+ ENTRY_PER_INFO_TYPE

                }
            }
        }
    }
}